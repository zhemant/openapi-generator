{{#models}}
{{#model}}
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "{{classname}}.h"


{{#vars}}
{{#isEnum}}
{{^isModel}}
{{#isPrimitiveType}}
char* {{datatypeWithEnum}}_ToString({{name}}_e {{name}}){
    char *{{name}}Array[] =  { {{#allowableValues}}{{#enumVars}}"{{{value}}}"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };
    return {{name}}Array[{{name}}];

}

{{name}}_e {{datatypeWithEnum}}_FromString(char* {{name}}){
    int stringToReturn = 0;
    char *{{name}}Array[] =  { {{#allowableValues}}{{#enumVars}}"{{{value}}}"{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}} };
    size_t sizeofArray = sizeof({{name}}Array) / sizeof({{name}}Array[0]);
    while(stringToReturn < sizeofArray) {
        if(strcmp({{name}}, {{name}}Array[stringToReturn]) == 0) {
            return stringToReturn;
        }
        stringToReturn++;
    }
    return -1; //Check this
}

cJSON *{{name}}_convertToJSON({{name}}_e {{name}}) {
	cJSON *item = cJSON_CreateObject();
    {{#isString}}
    if(cJSON_AddStringToObject(item, "{{{name}}}", {{{datatypeWithEnum}}}_ToString({{{name}}})) == NULL) {
    goto fail;
    }
    {{/isString}}
    {{^isString}}
    if(cJSON_AddNumberToObject(item, "{{{name}}}", {{{name}}}) == NULL) {
    goto fail;
    }
    {{/isString}}
    return item;
fail:
	cJSON_Delete(item);
	return NULL;
}

{{name}}_e {{name}}_parseFromJSON(cJSON *{{classname}}JSON){

    {{name}}_e *{{name}} = NULL;

    {{#isNumeric}}
    cJSON *{{{name}}}Var = cJSON_GetObjectItemCaseSensitive({{name}}JSON, "{{{name}}}");
    if(!cJSON_IsNumber({{{name}}}Var))
    {
    goto end;
    }
    {{/isNumeric}}
    {{#isEnum}}
    {{#isString}}
    {{{datatypeWithEnum}}}_e {{name}}Variable;
    cJSON *{{{name}}}Var = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{name}}}");
    if(!cJSON_IsString({{{name}}}Var) || ({{{name}}}Var->valuestring == NULL)){
    goto end;
    }

    {{name}}Variable = {{datatypeWithEnum}}_FromString({{{name}}}Var->valuestring);
    {{/isString}}
    {{/isEnum}}

    return {{name}}Variable;
end:
    return -1; // need to fix this

}
{{/isPrimitiveType}}
{{/isModel}}
{{/isEnum}}
{{/vars}}
{{^isEnum}}
{{classname}}_t *{{classname}}_create(
    {{#vars}}
    {{^isContainer}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isNumeric}}
    {{#isBoolean}}
    bool {{name}}{{#hasMore}},{{/hasMore}}
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    {{datatypeWithEnum}}_e {{name}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{#isByteArray}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isByteArray}}
    {{#isBinary}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isBinary}}
    {{#isDate}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isDate}}
    {{#isDateTime}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isMapContainer}}
    {{/isContainer}}
    {{/vars}}
    ) {
	{{classname}}_t *{{classname}} = malloc(sizeof({{classname}}_t));
	{{#vars}}
	{{classname}}->{{{name}}} = {{{name}}};
	{{/vars}}

	return {{classname}};
}


void {{classname}}_free({{classname}}_t *{{classname}}) {
    listEntry_t *listEntry;
	{{#vars}}
	{{^isContainer}}
	{{^isPrimitiveType}}
	{{{complexType}}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_free({{{classname}}}->{{{name}}});
	{{/isPrimitiveType}}
	{{#isPrimitiveType}}
    {{^isEnum}}
    {{#isString}}
    free({{{classname}}}->{{{name}}});
    {{/isString}}
    {{/isEnum}}
    {{#isBinary}}
    free({{{classname}}}->{{{name}}}->data);
    {{/isBinary}}
    {{#isDate}}
    free({{{classname}}}->{{{name}}});
    {{/isDate}}
    {{#isDateTime}}
    free({{{classname}}}->{{{name}}});
    {{/isDateTime}}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	list_ForEach(listEntry, {{classname}}->{{name}}) {
		free(listEntry->data);
	}
	list_free({{classname}}->{{name}});
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	{{^isEnum}}
    list_ForEach(listEntry, {{classname}}->{{name}}) {
		{{complexType}}_free(listEntry->data);
	}
    {{/isEnum}}
	list_free({{classname}}->{{name}});
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// TODO map/hash not supported at the moment
	{{/isMapContainer}}
	{{/isContainer}}
	{{/vars}}

	free({{classname}});
}

cJSON *{{classname}}_convertToJSON({{classname}}_t *{{classname}}) {
	cJSON *item = cJSON_CreateObject();
	{{#vars}}
	// {{{classname}}}->{{{name}}}
	{{^required}} if ({{{classname}}}->{{{name}}}) { {{/required}}
	{{^isContainer}}
	{{#isPrimitiveType}}
    {{#isNumeric}}
    if(cJSON_AddNumberToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //Numeric
    }
    {{/isNumeric}}
    {{#isBoolean}}
    if(cJSON_AddBoolToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //Bool
    }
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    if(cJSON_AddStringToObject(item, "{{{name}}}", {{#isModel}}{{{datatypeWithEnum}}}_ToString{{/isModel}}({{{classname}}}->{{{name}}})) == NULL)
    {
    goto fail; //Enum
    }
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    if(cJSON_AddStringToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{#isByteArray}}
    if(cJSON_AddNumberToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //Byte
    }
    {{/isByteArray}}
    {{#isBinary}}
    char* encoded_str = base64encode({{{classname}}}->{{{name}}}->data,{{{classname}}}->{{{name}}}->len);
    if(cJSON_AddStringToObject(item, "{{{name}}}", encoded_str) == NULL) {
    goto fail; //Binary
    }
    {{/isBinary}}
    {{#isDate}}
    if(cJSON_AddStringToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //Date
    }
    {{/isDate}}
    {{#isDateTime}}
    if(cJSON_AddStringToObject(item, "{{{name}}}", {{{classname}}}->{{{name}}}) == NULL) {
    goto fail; //Date-Time
    }
    {{/isDateTime}}
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
	cJSON *{{{name}}} = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_convertToJSON({{{classname}}}->{{{name}}});
	if({{{name}}} == NULL) {
		goto fail; //nonprimitive
	}
	cJSON_AddItemToObject(item, "{{{name}}}", {{{name}}});
	if(item->child == NULL) {
		goto fail;
	}
	{{/isPrimitiveType}}
	{{/isContainer}}
	{{#isContainer}}
	{{#isListContainer}}
	{{#isPrimitiveType}}
	cJSON *{{{name}}} = cJSON_AddArrayToObject(item, "{{{name}}}");
	if({{{name}}} == NULL) {
		goto fail; //primitive container
	}

	listEntry_t *{{{name}}}ListEntry;
    list_ForEach({{{name}}}ListEntry, {{{classname}}}->{{{name}}}) {
        {{#items}}
        {{#isString}}
        if(cJSON_AddStringToObject({{{name}}}, "", (char*){{{name}}}ListEntry->data) == NULL)
        {
            goto fail;
        }
        {{/isString}}
        {{^isString}}
        if(cJSON_AddNumberToObject({{{name}}}, "", *(double *){{{name}}}ListEntry->data) == NULL)
        {
            goto fail;
        }
        {{/isString}}
        {{/items}}
    }
	{{/isPrimitiveType}}
	{{^isPrimitiveType}}
    cJSON *{{{name}}} = cJSON_AddArrayToObject(item, "{{{name}}}");
	if({{{name}}} == NULL) {
		goto fail; //nonprimitive container
	}

	listEntry_t *{{{name}}}ListEntry;
	list_ForEach({{{name}}}ListEntry, {{classname}}->{{{name}}}) {
		cJSON *item = {{complexType}}_convertToJSON({{#isEnum}}{{#items}}({{datatypeWithEnum}}_e){{/items}}{{/isEnum}}{{{name}}}ListEntry->data);
		if(item == NULL) {
			goto fail;
		}
		cJSON_AddItemToArray({{{name}}}, item);
	}
	{{/isPrimitiveType}}
	{{/isListContainer}}
	{{#isMapContainer}}
	// map Container
	cJSON *{{{name}}} = cJSON_AddObjectToObject(item, "{{{name}}}");
	if({{{name}}} == NULL) {
		goto fail; //primitive map container
	}
    cJSON *localMapObject = cJSON_CreateObject(); //Memory free to be implemented in user code
	listEntry_t *{{{name}}}ListEntry;
    list_ForEach({{{name}}}ListEntry, {{{classname}}}->{{{name}}}) {
        keyValuePair_t *localKeyValue = (keyValuePair_t*){{{name}}}ListEntry->data;
        {{#items}}
        {{#isString}}
        if(cJSON_AddStringToObject(localMapObject, localKeyValue->key, (char*)localKeyValue->value) == NULL)
        {
            goto fail;
        }
        {{/isString}}
        {{^isString}}
        if(cJSON_AddNumberToObject(localMapObject, localKeyValue->key, *(double *)localKeyValue->value) == NULL)
        {
            goto fail;
        }
        {{/isString}}
        {{/items}}
        cJSON_AddItemToObject({{{name}}},"", localMapObject);
    }
	{{/isMapContainer}}
	{{/isContainer}}
	{{^required}}
    }
	{{/required}}

    {{/vars}}
	return item;
fail:
	cJSON_Delete(item);
	return NULL;
}

{{classname}}_t *{{classname}}_parseFromJSON(cJSON *{{classname}}JSON){

    {{classname}}_t *{{classname}} = NULL;

    {{#vars}}
    // {{{classname}}}->{{{name}}}
    cJSON *{{{name}}} = cJSON_GetObjectItemCaseSensitive({{classname}}JSON, "{{{name}}}");

    {{^isContainer}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsNumber({{{name}}}))
    {
    goto end; //Numeric
    }
    {{/isNumeric}}
    {{#isBoolean}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsBool({{{name}}}))
    {
    goto end; //Bool
    }
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    {{{datatypeWithEnum}}}_e {{name}}Variable;
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsString({{{name}}}))
    {
    goto end; //Enum
    }
    {{name}}Variable = {{#isModel}}{{datatypeWithEnum}}_FromString{{/isModel}}({{{name}}}->valuestring);
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsString({{{name}}}))
    {
    goto end; //String
    }
    {{/isString}}
    {{/isEnum}}
    {{#isByteArray}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsNumber({{{name}}}))
    {
    goto end; //Byte
    }
    {{/isByteArray}}
    {{#isBinary}}
    binary_t* decoded_str;
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsString({{{name}}}))
    {
    goto end; //Binary
    }
    char* decoded = base64decode({{{name}}}->valuestring, strlen({{{name}}}->valuestring));
    decoded_str->data = malloc((strlen(decoded) - 1));
    memcpy(decoded_str->data,decoded,(strlen(decoded)-1));
    decoded_str->len = strlen(decoded) - 1;
    {{/isBinary}}
    {{#isDate}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsString({{{name}}}))
    {
    goto end; //Date
    }
    {{/isDate}}
    {{#isDateTime}}
    {{^required}}if ({{{name}}}) { {{/required}}
    if(!cJSON_IsString({{{name}}}))
    {
    goto end; //DateTime
    }
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{^isFreeFormObject}}{{complexType}}{{/isFreeFormObject}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_t *{{name}}_local_var = NULL;
    {{^required}}if ({{{name}}}) { {{/required}}
    {{{name}}}_local_var = {{complexType}}{{#isFreeFormObject}}object{{/isFreeFormObject}}_parseFromJSON({{{name}}}); //nonprimitive
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    list_t *{{{name}}}List;
    {{^required}}if ({{{name}}}) { {{/required}}
    cJSON *{{{name}}}_local;
    if(!cJSON_IsArray({{{name}}})) {
        goto end;//primitive container
    }
    {{{name}}}List = list_create();

    cJSON_ArrayForEach({{{name}}}_local, {{{name}}})
    {
        {{#items}}
        {{#isString}}
        if(!cJSON_IsString({{{name}}}_local))
        {
            goto end;
        }
        list_addElement({{{name}}}List , strdup({{{name}}}_local->valuestring));
        {{/isString}}
        {{^isString}}
        if(!cJSON_IsNumber({{{name}}}_local))
        {
            goto end;
        }
        list_addElement({{{name}}}List , &{{{name}}}_local->valuedouble);
        {{/isString}}
        {{/items}}

    }
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    list_t *{{{name}}}List;
    {{^required}}if ({{{name}}}) { {{/required}}
    cJSON *{{{name}}}_local_nonprimitive;
    if(!cJSON_IsArray({{{name}}})){
        goto end; //nonprimitive container
    }

    {{{name}}}List = list_create();

    cJSON_ArrayForEach({{{name}}}_local_nonprimitive,{{{name}}} )
    {
        if(!cJSON_IsObject({{{name}}}_local_nonprimitive)){
            goto end;
        }
        {{#isEnum}}{{#items}}{{datatypeWithEnum}}_e {{/items}}{{/isEnum}}{{^isEnum}}{{complexType}}_t *{{/isEnum}}{{{name}}}Item = {{complexType}}_parseFromJSON({{{name}}}_local_nonprimitive);

        list_addElement({{{name}}}List, {{#isEnum}}{{#items}}(void *){{/items}}{{/isEnum}}{{{name}}}Item);
    }
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    list_t *{{{complexType}}}List;
    {{^required}}if ({{{name}}}) { {{/required}}
    cJSON *{{{complexType}}}_local_map;
    if(!cJSON_IsObject({{{name}}})) {
        goto end;//primitive map container
    }
    {{{complexType}}}List = list_create();
    keyValuePair_t *localMapKeyPair;
    cJSON_ArrayForEach({{{complexType}}}_local_map, {{{name}}})
    {
        {{#items}}
        {{#isString}}
        if(!cJSON_IsString({{{complexType}}}_local_map))
        {
            goto end;
        }
        localMapKeyPair = keyValuePair_create(strdup({{{complexType}}}_local_map->string),strdup({{{complexType}}}_local_map->valuestring))
        list_addElement({{{complexType}}}List , localMapKeyPair);
        {{/isString}}
        {{^isString}}
        if(!cJSON_IsNumber({{{complexType}}}_local_map))
        {
            goto end;
        }
        localMapKeyPair = keyValuePair_create(strdup({{{complexType}}}_local_map->string),&{{{complexType}}}_local_map->valuedouble );
        list_addElement({{{complexType}}}List , localMapKeyPair);
        {{/isString}}
        {{/items}}

    }
    {{/isMapContainer}}
    {{/isContainer}}
    {{^required}}
    }
    {{/required}}

    {{/vars}}

    {{classname}} = {{classname}}_create (
        {{#vars}}
        {{^isContainer}}
        {{^isPrimitiveType}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}_local_var{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{#isPrimitiveType}}
        {{#isNumeric}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valuedouble{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isNumeric}}
        {{#isBoolean}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valueint{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isBoolean}}
        {{#isEnum}}
        {{#isString}}
        {{^required}}{{{name}}} ? {{/required}}{{name}}Variable{{^required}} : -1{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isString}}
        {{/isEnum}}
        {{^isEnum}}
        {{#isString}}
        {{^required}}{{{name}}} ? {{/required}}strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isString}}
        {{/isEnum}}
        {{#isByteArray}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}->valueint{{^required}} : 0{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isByteArray}}
        {{#isBinary}}
        {{^required}}{{{name}}} ? {{/required}}decoded_str{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isBinary}}
        {{#isDate}}
        {{^required}}{{{name}}} ? {{/required}}strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isDate}}
        {{#isDateTime}}
        {{^required}}{{{name}}} ? {{/required}}strdup({{{name}}}->valuestring){{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isDateTime}}
        {{/isPrimitiveType}}
        {{/isContainer}}
        {{#isContainer}}
        {{#isListContainer}}
        {{#isPrimitiveType}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}List{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        {{^required}}{{{name}}} ? {{/required}}{{{name}}}List{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isPrimitiveType}}
        {{/isListContainer}}
        {{#isMapContainer}}
        {{^required}}{{{name}}} ? {{/required}}{{{complexType}}}List{{^required}} : NULL{{/required}}{{#hasMore}},{{/hasMore}}
        {{/isMapContainer}}
        {{/isContainer}}
        {{/vars}}
        );

    return {{classname}};
end:
    cJSON_Delete({{classname}}JSON);
    return NULL;

}
{{/isEnum}}
{{/model}}
{{/models}}
