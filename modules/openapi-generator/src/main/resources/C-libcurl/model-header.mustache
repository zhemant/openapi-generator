{{#models}}{{#model}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef _{{classname}}_H_
#define _{{classname}}_H_

#include <string.h>
#include "../external/cJSON.h"
#include "../include/list.h"
#include "../include/keyValuePair.h"
{{#imports}}
#include "{{{.}}}.h"
{{/imports}}


{{#vars}}
{{#isEnum}}
{{^isModel}}
{{#isPrimitiveType}}
{{#allowableValues}}
typedef enum  { {{#enumVars}} {{{value}}}{{^-last}},{{/-last}}{{/enumVars}} } {{name}}_e;
{{/allowableValues}}

char* {{name}}_ToString({{name}}_e {{name}});

{{name}}_e {{name}}_FromString(char* {{name}});

cJSON *{{name}}_convertToJSON({{name}}_e {{name}});

{{name}}_e {{name}}_parseFromJSON(char *jsonString);
{{/isPrimitiveType}}
{{/isModel}}
{{/isEnum}}
{{/vars}}

{{^isEnum}}
typedef struct {{classname}}_t {
    {{#vars}}
    {{^isContainer}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}; //nonprimitive
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    {{datatype}} {{name}}; //numeric
    {{/isNumeric}}
    {{#isBoolean}}
    bool {{name}}; //boolean
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    {{datatypeWithEnum}}_e {{name}}; //enum
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    {{datatype}} *{{name}}; // string
    {{/isString}}
    {{/isEnum}}
    {{#isByteArray}}
    {{datatype}} {{name}}; //Byte
    {{/isByteArray}}
    {{#isBinary}}
    {{datatype}} {{name}}; //binary
    {{/isBinary}}
    {{#isDate}}
    {{datatype}} *{{name}}; //date
    {{/isDate}}
    {{#isDateTime}}
    {{datatype}} *{{name}}; //date time
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    {{datatype}}_t *{{name}}; //primitive container
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}; //nonprimitive container
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    {{datatype}} {{name}}; //map
    {{/isMapContainer}}
    {{/isContainer}}
    {{/vars}}

} {{classname}}_t;

{{classname}}_t *{{classname}}_create(
    {{#vars}}
    {{^isContainer}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{#isPrimitiveType}}
    {{#isNumeric}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isNumeric}}
    {{#isBoolean}}
    bool {{name}}{{#hasMore}},{{/hasMore}}
    {{/isBoolean}}
    {{#isEnum}}
    {{#isString}}
    {{datatypeWithEnum}}_e {{name}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{^isEnum}}
    {{#isString}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isString}}
    {{/isEnum}}
    {{#isByteArray}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isByteArray}}
    {{#isBinary}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    {{/isBinary}}
    {{#isDate}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isDate}}
    {{#isDateTime}}
    {{datatype}} *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isDateTime}}
    {{/isPrimitiveType}}
    {{/isContainer}}
    {{#isContainer}}
    {{#isListContainer}}
    {{#isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}
    {{datatype}}_t *{{name}}{{#hasMore}},{{/hasMore}}
    {{/isPrimitiveType}}
    {{/isListContainer}}
    {{#isMapContainer}}
    {{datatype}} {{name}}{{#hasMore}},{{/hasMore}}
    // TODO map/hash not supported at the moment
    {{/isMapContainer}}
    {{/isContainer}}
    {{/vars}}
);

void {{classname}}_free({{classname}}_t *{{classname}});

{{classname}}_t *{{classname}}_parseFromJSON(cJSON *{{classname}}JSON);

cJSON *{{classname}}_convertToJSON({{classname}}_t *{{classname}});
{{/isEnum}}
#endif /* _{{classname}}_H_ */
{{/model}}{{/models}}
